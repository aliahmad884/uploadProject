(()=>{var e={};e.id=430,e.ids=[430],e.modules={8013:e=>{"use strict";e.exports=require("mongodb")},399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6113:e=>{"use strict";e.exports=require("crypto")},7147:e=>{"use strict";e.exports=require("fs")},2037:e=>{"use strict";e.exports=require("os")},1017:e=>{"use strict";e.exports=require("path")},4679:(e,t,r)=>{"use strict";r.r(t),r.d(t,{originalPathname:()=>E,patchFetch:()=>h,requestAsyncStorage:()=>f,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>v});var n={};r.r(n),r.d(n,{POST:()=>d});var o=r(9303),s=r(8716),a=r(670),i=r(6636),l=r.n(i),p=r(8013);l().config();let c=new p.MongoClient(process.env.URI_String);async function d(e){try{let t=await e.json();await c.connect();let r=c.db(process.env.DataBase).collection("ClipBoard"),n=new p.ObjectId(`${t.id}`);return await r.findOne({_id:n})?await r.updateOne({_id:n},{$set:{blogId:t.blogId}}):await r.insertOne({_id:n,blogId:t.blogId}),new Response(JSON.stringify({msg:"Document Found and updated"}),{status:200,headers:{"COntent-Type":"application/json"}})}catch(e){return console.log("Internel Server Problem",e),new Response(JSON.stringify({msg:"Internel Server Error"}),{status:500,headers:{"Content-Type":"application/json"}})}}let u=new o.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/clipBoard/route",pathname:"/api/clipBoard",filename:"route",bundlePath:"app/api/clipBoard/route"},resolvedPagePath:"/home/aldor/Code_Space/uploadProject/app/api/clipBoard/route.js",nextConfigOutput:"",userland:n}),{requestAsyncStorage:f,staticGenerationAsyncStorage:v,serverHooks:g}=u,E="/api/clipBoard/route";function h(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:v})}},6636:(e,t,r)=>{let n=r(7147),o=r(1017),s=r(2037),a=r(6113),i=r(1564).version,l=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function p(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}function c(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function d(e){let t=null;if(e&&e.path&&e.path.length>0){if(Array.isArray(e.path))for(let r of e.path)n.existsSync(r)&&(t=r.endsWith(".vault")?r:`${r}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`}else t=o.resolve(process.cwd(),".env.vault");return n.existsSync(t)?t:null}function u(e){return"~"===e[0]?o.join(s.homedir(),e.slice(1)):e}let f={configDotenv:function(e){let t;let r=o.resolve(process.cwd(),".env"),s="utf8",a=!!(e&&e.debug);e&&e.encoding?s=e.encoding:a&&p("No encoding is specified. UTF-8 is used by default");let i=[r];if(e&&e.path){if(Array.isArray(e.path))for(let t of(i=[],e.path))i.push(u(t));else i=[u(e.path)]}let l={};for(let r of i)try{let t=f.parse(n.readFileSync(r,{encoding:s}));f.populate(l,t,e)}catch(e){a&&p(`Failed to load ${r} ${e.message}`),t=e}let c=process.env;return(e&&null!=e.processEnv&&(c=e.processEnv),f.populate(c,l,e),t)?{parsed:l,error:t}:{parsed:l}},_configVault:function(e){console.log(`[dotenv@${i}][INFO] Loading env from encrypted .env.vault`);let t=f._parseVault(e),r=process.env;return e&&null!=e.processEnv&&(r=e.processEnv),f.populate(r,t,e),{parsed:t}},_parseVault:function(e){let t;let r=d(e),n=f.configDotenv({path:r});if(!n.parsed){let e=Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);throw e.code="MISSING_DATA",e}let o=c(e).split(","),s=o.length;for(let e=0;e<s;e++)try{let r=o[e].trim(),s=function(e,t){let r;try{r=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){let e=Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}let n=r.password;if(!n){let e=Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}let o=r.searchParams.get("environment");if(!o){let e=Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}let s=`DOTENV_VAULT_${o.toUpperCase()}`,a=e.parsed[s];if(!a){let e=Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:a,key:n}}(n,r);t=f.decrypt(s.ciphertext,s.key);break}catch(t){if(e+1>=s)throw t}return f.parse(t)},config:function(e){if(0===c(e).length)return f.configDotenv(e);let t=d(e);if(!t){var r;return r=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${i}][WARN] ${r}`),f.configDotenv(e)}return f._configVault(e)},decrypt:function(e,t){let r=Buffer.from(t.slice(-64),"hex"),n=Buffer.from(e,"base64"),o=n.subarray(0,12),s=n.subarray(-16);n=n.subarray(12,-16);try{let e=a.createDecipheriv("aes-256-gcm",r,o);return e.setAuthTag(s),`${e.update(n)}${e.final()}`}catch(n){let e=n instanceof RangeError,t="Invalid key length"===n.message,r="Unsupported state or unable to authenticate data"===n.message;if(e||t){let e=Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(r){let e=Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw n}},parse:function(e){let t;let r={},n=e.toString();for(n=n.replace(/\r\n?/mg,"\n");null!=(t=l.exec(n));){let e=t[1],n=t[2]||"",o=(n=n.trim())[0];n=n.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),'"'===o&&(n=(n=n.replace(/\\n/g,"\n")).replace(/\\r/g,"\r")),r[e]=n}return r},populate:function(e,t,r={}){let n=!!(r&&r.debug),o=!!(r&&r.override);if("object"!=typeof t){let e=Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(let r of Object.keys(t))Object.prototype.hasOwnProperty.call(e,r)?(!0===o&&(e[r]=t[r]),n&&(!0===o?p(`"${r}" is already defined and WAS overwritten`):p(`"${r}" is already defined and was NOT overwritten`))):e[r]=t[r]}};e.exports.configDotenv=f.configDotenv,e.exports._configVault=f._configVault,e.exports._parseVault=f._parseVault,e.exports.config=f.config,e.exports.decrypt=f.decrypt,e.exports.parse=f.parse,e.exports.populate=f.populate,e.exports=f},9303:(e,t,r)=>{"use strict";e.exports=r(517)},1564:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.4.5","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[948],()=>r(4679));module.exports=n})();